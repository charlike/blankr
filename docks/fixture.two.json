[
  {
    "description": "Module dependencies.",
    "isPrivate": true,
    "ignore": false,
    "source": "var EventEmitter = require('events').EventEmitter;\nvar spawn = require('child_process').spawn;\nvar path = require('path');\nvar dirname = path.dirname;\nvar basename = path.basename;\n\n",
    "context": {
      "type": "declaration",
      "name": "EventEmitter",
      "value": "require('events').EventEmitter",
      "string": "EventEmitter"
    }
  },
  {
    "description": "Expose the root command.",
    "isPrivate": true,
    "ignore": false,
    "source": "exports = module.exports = new Command;\n\n"
  },
  {
    "description": "Expose `Command`.",
    "isPrivate": true,
    "ignore": false,
    "source": "exports.Command = Command;\n\n",
    "context": {
      "type": "property",
      "receiver": "exports",
      "name": "Command",
      "value": "Command",
      "string": "exports.Command"
    }
  },
  {
    "description": "Expose `Option`.",
    "isPrivate": true,
    "ignore": false,
    "source": "exports.Option = Option;\n\n",
    "context": {
      "type": "property",
      "receiver": "exports",
      "name": "Option",
      "value": "Option",
      "string": "exports.Option"
    }
  },
  {
    "description": "Initialize a new `Option` with the given `flags` and `description`.",
    "param": [
      "{String} flags",
      "{String} description"
    ],
    "api": "public",
    "params": [
      {
        "type": "String",
        "name": "flags",
        "description": ""
      },
      {
        "type": "String",
        "name": "description",
        "description": ""
      }
    ],
    "isPrivate": false,
    "ignore": false,
    "source": "function Option(flags, description) {\n  this.flags = flags;\n  this.required = ~flags.indexOf('<');\n  this.optional = ~flags.indexOf('[');\n  this.bool = !~flags.indexOf('-no-');\n  flags = flags.split(/[ ,|]+/);\n  if (flags.length > 1 && !/^[[<]/.test(flags[1])) this.short = flags.shift();\n  this.long = flags.shift();\n  this.description = description || '';\n}\n\n",
    "context": {
      "type": "function",
      "name": "Option",
      "string": "Option()"
    }
  },
  {
    "description": "Return option name.",
    "return": "{String}",
    "api": "private",
    "isPrivate": true,
    "ignore": false,
    "source": "Option.prototype.name = function(){\n  return this.long\n    .replace('--', '')\n    .replace('no-', '');\n};\n\n",
    "context": {
      "type": "method",
      "constructor": "Option",
      "cons": "Option",
      "name": "name",
      "string": "Option.prototype.name()"
    }
  },
  {
    "description": "Check if `arg` matches the short or long flag.",
    "param": "{String} arg",
    "return": "{Boolean}",
    "api": "private",
    "params": [
      {
        "type": "String",
        "name": "arg",
        "description": ""
      }
    ],
    "isPrivate": true,
    "ignore": false,
    "source": "Option.prototype.is = function(arg){\n  return arg == this.short\n    || arg == this.long;\n};\n\n",
    "context": {
      "type": "method",
      "constructor": "Option",
      "cons": "Option",
      "name": "is",
      "string": "Option.prototype.is()"
    }
  },
  {
    "description": "Initialize a new `Command`.",
    "param": "{String} name",
    "api": "public",
    "params": [
      {
        "type": "String",
        "name": "name",
        "description": ""
      }
    ],
    "isPrivate": false,
    "ignore": false,
    "source": "function Command(name) {\n  this.commands = [];\n  this.options = [];\n  this._execs = [];\n  this._args = [];\n  this._name = name;\n}\n\n",
    "context": {
      "type": "function",
      "name": "Command",
      "string": "Command()"
    }
  },
  {
    "description": "Inherit from `EventEmitter.prototype`.",
    "isPrivate": true,
    "ignore": false,
    "source": "Command.prototype.__proto__ = EventEmitter.prototype;\n\n",
    "context": {
      "type": "property",
      "constructor": "Command",
      "cons": "Command",
      "name": "__proto__",
      "value": "EventEmitter.prototype",
      "string": "Command.prototype.__proto__"
    }
  },
  {
    "description": "Add command `name`.\n\nThe `.action()` callback is invoked when the\ncommand `name` is specified via __ARGV__,\nand the remaining arguments are applied to the\nfunction for access.\n\nWhen the `name` is \"*\" an un-matched command\nwill be passed as the first arg, followed by\nthe rest of __ARGV__ remaining.\n\n**Example:**\n\n```js\nprogram\n  .version('0.0.1')\n  .option('-C, --chdir <path>', 'change the working directory')\n  .option('-c, --config <path>', 'set config path. defaults to ./deploy.conf')\n  .option('-T, --no-tests', 'ignore test hook')\n\nprogram\n  .command('setup')\n  .description('run remote setup commands')\n  .action(function(){\n    console.log('setup');\n  });\n\nprogram\n  .command('exec <cmd>')\n  .description('run the given remote command')\n  .action(function(cmd){\n    console.log('exec \"%s\"', cmd);\n  });\n\nprogram\n  .command('*')\n  .description('deploy the given env')\n  .action(function(env){\n    console.log('deploying \"%s\"', env);\n  });\n\nprogram.parse(process.argv);\n```",
    "param": [
      "{String} name",
      "{String} desc"
    ],
    "return": "{Command} the new command",
    "api": "public",
    "params": [
      {
        "type": "String",
        "name": "name",
        "description": ""
      },
      {
        "type": "String",
        "name": "desc",
        "description": ""
      }
    ],
    "isPrivate": false,
    "ignore": false,
    "source": "Command.prototype.command = function(name, desc) {\n  var args = name.split(/ +/);\n  var cmd = new Command(args.shift());\n  if (desc) cmd.description(desc);\n  if (desc) this.executables = true;\n  if (desc) this._execs[cmd._name] = true;\n  this.commands.push(cmd);\n  cmd.parseExpectedArgs(args);\n  cmd.parent = this;\n  if (desc) return this;\n  return cmd;\n};\n\n",
    "context": {
      "type": "method",
      "constructor": "Command",
      "cons": "Command",
      "name": "command",
      "string": "Command.prototype.command()"
    }
  },
  {
    "description": "Add an implicit `help [cmd]` subcommand\nwhich invokes `--help` for the given command.",
    "api": "private",
    "isPrivate": true,
    "ignore": false,
    "source": "Command.prototype.addImplicitHelpCommand = function() {\n  this.command('help [cmd]', 'display help for [cmd]');\n};\n\n",
    "context": {
      "type": "method",
      "constructor": "Command",
      "cons": "Command",
      "name": "addImplicitHelpCommand",
      "string": "Command.prototype.addImplicitHelpCommand()"
    }
  },
  {
    "description": "Parse expected `args`.\nFor example `[\"[type]\"]` becomes `[{ required: false, name: 'type' }]`.",
    "param": "{Array} args",
    "return": "{Command} for chaining",
    "api": "public",
    "params": [
      {
        "type": "Array",
        "name": "args",
        "description": ""
      }
    ],
    "isPrivate": false,
    "ignore": false,
    "source": "Command.prototype.parseExpectedArgs = function(args){\n  if (!args.length) return;\n  var self = this;\n  args.forEach(function(arg){\n    switch (arg[0]) {\n      case '<':\n        self._args.push({ required: true, name: arg.slice(1, -1) });\n        break;\n      case '[':\n        self._args.push({ required: false, name: arg.slice(1, -1) });\n        break;\n    }\n  });\n  return this;\n};\n\n",
    "context": {
      "type": "method",
      "constructor": "Command",
      "cons": "Command",
      "name": "parseExpectedArgs",
      "string": "Command.prototype.parseExpectedArgs()"
    }
  },
  {
    "description": "Register callback `fn` for the command.\n\n**Example:**\n\n```js\nprogram\n  .command('help')\n  .description('display verbose help')\n  .action(function(){\n    // output help here\n  });\n```",
    "param": "{Function} fn",
    "return": "{Command} for chaining",
    "api": "public",
    "params": [
      {
        "type": "Function",
        "name": "fn",
        "description": ""
      }
    ],
    "isPrivate": false,
    "ignore": false,
    "source": "Command.prototype.action = function(fn){\n  var self = this;\n  this.parent.on(this._name, function(args, unknown){\n    // Parse any so-far unknown options\n    args = args || [];\n    unknown = unknown || [];\n\n    var parsed = self.parseOptions(unknown);\n\n    // Output help if necessary\n    outputHelpIfNecessary(self, parsed.unknown);\n\n    // If there are still any unknown options, then we simply\n    // die, unless someone asked for help, in which case we give it\n    // to them, and then we die.\n    if (parsed.unknown.length > 0) {\n      self.unknownOption(parsed.unknown[0]);\n    }\n\n    // Leftover arguments need to be pushed back. Fixes issue #56\n    if (parsed.args.length) args = parsed.args.concat(args);\n\n    self._args.forEach(function(arg, i){\n      if (arg.required && null == args[i]) {\n        self.missingArgument(arg.name);\n      }\n    });\n\n    // Always append ourselves to the end of the arguments,\n    // to make sure we match the number of arguments the user\n    // expects\n    if (self._args.length) {\n      args[self._args.length] = self;\n    } else {\n      args.push(self);\n    }\n\n    fn.apply(this, args);\n  });\n  return this;\n};\n\n",
    "context": {
      "type": "method",
      "constructor": "Command",
      "cons": "Command",
      "name": "action",
      "string": "Command.prototype.action()"
    }
  },
  {
    "description": "Define option with `flags`, `description` and optional\ncoercion `fn`.\n\nThe `flags` string should contain both the short and long flags,\nseparated by comma, a pipe or space. The following are all valid\nall will output this way when `--help` is used.\n\n- \"-p, --pepper\"\n- \"-p|--pepper\"\n- \"-p --pepper\"\n\n**Example:**\n\n```js\n/ simple boolean defaulting to false\nprogram.option('-p, --pepper', 'add pepper');\n\n--pepper\nprogram.pepper\n/ => Boolean\n\n/ simple boolean defaulting to true\nprogram.option('-C, --no-cheese', 'remove cheese');\n\nprogram.cheese\n/ => true\n\n--no-cheese\nprogram.cheese\n/ => false\n\n/ required argument\nprogram.option('-C, --chdir <path>', 'change the working directory');\n\n--chdir /tmp\nprogram.chdir\n/ => \"/tmp\"\n\n/ optional argument\nprogram.option('-c, --cheese [type]', 'add cheese [marble]');\n```",
    "param": [
      "{String} flags",
      "{String} description",
      "{Function|Mixed} fn or default",
      "{Mixed} defaultValue"
    ],
    "return": "{Command} for chaining",
    "api": "public",
    "params": [
      {
        "type": "String",
        "name": "flags",
        "description": ""
      },
      {
        "type": "String",
        "name": "description",
        "description": ""
      },
      {
        "type": "Function|Mixed",
        "name": "fn",
        "description": "or default"
      },
      {
        "type": "Mixed",
        "name": "defaultValue",
        "description": ""
      }
    ],
    "isPrivate": false,
    "ignore": false,
    "source": "Command.prototype.option = function(flags, description, fn, defaultValue){\n  var self = this\n    , option = new Option(flags, description)\n    , oname = option.name()\n    , name = camelcase(oname);\n\n  // default as 3rd arg\n  if ('function' != typeof fn) defaultValue = fn, fn = null;\n\n  // preassign default value only for --no-*, [optional], or <required>\n  if (false == option.bool || option.optional || option.required) {\n    // when --no-* we make sure default is true\n    if (false == option.bool) defaultValue = true;\n    // preassign only if we have a default\n    if (undefined !== defaultValue) self[name] = defaultValue;\n  }\n\n  // register the option\n  this.options.push(option);\n\n  // when it's passed assign the value\n  // and conditionally invoke the callback\n  this.on(oname, function(val){\n    // coercion\n    if (null !== val && fn) val = fn(val, undefined === self[name] ? defaultValue : self[name]);\n\n    // unassigned or bool\n    if ('boolean' == typeof self[name] || 'undefined' == typeof self[name]) {\n      // if no value, bool true, and we have a default, then use it!\n      if (null == val) {\n        self[name] = option.bool\n          ? defaultValue || true\n          : false;\n      } else {\n        self[name] = val;\n      }\n    } else if (null !== val) {\n      // reassign\n      self[name] = val;\n    }\n  });\n\n  return this;\n};\n\n",
    "context": {
      "type": "method",
      "constructor": "Command",
      "cons": "Command",
      "name": "option",
      "string": "Command.prototype.option()"
    }
  },
  {
    "description": "Parse `argv`, settings options and invoking commands when defined.",
    "param": "{Array} argv",
    "return": "{Command} for chaining",
    "api": "public",
    "params": [
      {
        "type": "Array",
        "name": "argv",
        "description": ""
      }
    ],
    "isPrivate": false,
    "ignore": false,
    "source": "Command.prototype.parse = function(argv){\n  // implicit help\n  if (this.executables) this.addImplicitHelpCommand();\n\n  // store raw args\n  this.rawArgs = argv;\n\n  // guess name\n  this._name = this._name || basename(argv[1], '.js');\n\n  // process argv\n  var parsed = this.parseOptions(this.normalize(argv.slice(2)));\n  var args = this.args = parsed.args;\n\n  var result = this.parseArgs(this.args, parsed.unknown);\n\n  // executable sub-commands\n  var name = result.args[0];\n  if (this._execs[name]) return this.executeSubCommand(argv, args, parsed.unknown);\n\n  return result;\n};\n\n",
    "context": {
      "type": "method",
      "constructor": "Command",
      "cons": "Command",
      "name": "parse",
      "string": "Command.prototype.parse()"
    }
  },
  {
    "description": "Execute a sub-command executable.",
    "param": [
      "{Array} argv",
      "{Array} args",
      "{Array} unknown"
    ],
    "api": "private",
    "params": [
      {
        "type": "Array",
        "name": "argv",
        "description": ""
      },
      {
        "type": "Array",
        "name": "args",
        "description": ""
      },
      {
        "type": "Array",
        "name": "unknown",
        "description": ""
      }
    ],
    "isPrivate": true,
    "ignore": false,
    "source": "Command.prototype.executeSubCommand = function(argv, args, unknown) {\n  args = args.concat(unknown);\n\n  if (!args.length) this.help();\n  if ('help' == args[0] && 1 == args.length) this.help();\n\n  // <cmd> --help\n  if ('help' == args[0]) {\n    args[0] = args[1];\n    args[1] = '--help';\n  }\n\n  // executable\n  var dir = dirname(argv[1]);\n  var bin = basename(argv[1], '.js') + '-' + args[0];\n\n  // check for ./<bin> first\n  var local = path.join(dir, bin);\n\n  // run it\n  args = args.slice(1);\n  args.unshift(local);\n  var proc = spawn('node', args, { stdio: 'inherit', customFds: [0, 1, 2] });\n  proc.on('error', function(err){\n    if (err.code == \"ENOENT\") {\n      console.error('\\n  %s(1) does not exist, try --help\\n', bin);\n    } else if (err.code == \"EACCES\") {\n      console.error('\\n  %s(1) not executable. try chmod or run with root\\n', bin);\n    }\n  });\n\n  this.runningCommand = proc;\n};\n\n",
    "context": {
      "type": "method",
      "constructor": "Command",
      "cons": "Command",
      "name": "executeSubCommand",
      "string": "Command.prototype.executeSubCommand()"
    }
  },
  {
    "description": "Normalize `args`, splitting joined short flags. For example\nthe arg \"-abc\" is equivalent to \"-a -b -c\".\nThis also normalizes equal sign and splits \"--abc=def\" into \"--abc def\".",
    "param": "{Array} args",
    "return": "{Array}",
    "api": "private",
    "params": [
      {
        "type": "Array",
        "name": "args",
        "description": ""
      }
    ],
    "isPrivate": true,
    "ignore": false,
    "source": "Command.prototype.normalize = function(args){\n  var ret = []\n    , arg\n    , lastOpt\n    , index;\n\n  for (var i = 0, len = args.length; i < len; ++i) {\n    arg = args[i];\n    i > 0 && (lastOpt = this.optionFor(args[i-1]));\n\n    if (lastOpt && lastOpt.required) {\n      ret.push(arg);\n    } else if (arg.length > 1 && '-' == arg[0] && '-' != arg[1]) {\n      arg.slice(1).split('').forEach(function(c){\n        ret.push('-' + c);\n      });\n    } else if (/^--/.test(arg) && ~(index = arg.indexOf('='))) {\n      ret.push(arg.slice(0, index), arg.slice(index + 1));\n    } else {\n      ret.push(arg);\n    }\n  }\n\n  return ret;\n};\n\n",
    "context": {
      "type": "method",
      "constructor": "Command",
      "cons": "Command",
      "name": "normalize",
      "string": "Command.prototype.normalize()"
    }
  },
  {
    "description": "Parse command `args`.\n\nWhen listener(s) are available those\ncallbacks are invoked, otherwise the \"*\"\nevent is emitted and those actions are invoked.",
    "param": "{Array} args",
    "return": "{Command} for chaining",
    "api": "private",
    "params": [
      {
        "type": "Array",
        "name": "args",
        "description": ""
      }
    ],
    "isPrivate": true,
    "ignore": false,
    "source": "Command.prototype.parseArgs = function(args, unknown){\n  var cmds = this.commands\n    , len = cmds.length\n    , name;\n\n  if (args.length) {\n    name = args[0];\n    if (this.listeners(name).length) {\n      this.emit(args.shift(), args, unknown);\n    } else {\n      this.emit('*', args);\n    }\n  } else {\n    outputHelpIfNecessary(this, unknown);\n\n    // If there were no args and we have unknown options,\n    // then they are extraneous and we need to error.\n    if (unknown.length > 0) {\n      this.unknownOption(unknown[0]);\n    }\n  }\n\n  return this;\n};\n\n",
    "context": {
      "type": "method",
      "constructor": "Command",
      "cons": "Command",
      "name": "parseArgs",
      "string": "Command.prototype.parseArgs()"
    }
  },
  {
    "description": "Return an option matching `arg` if any.",
    "param": "{String} arg",
    "return": "{Option}",
    "api": "private",
    "params": [
      {
        "type": "String",
        "name": "arg",
        "description": ""
      }
    ],
    "isPrivate": true,
    "ignore": false,
    "source": "Command.prototype.optionFor = function(arg){\n  for (var i = 0, len = this.options.length; i < len; ++i) {\n    if (this.options[i].is(arg)) {\n      return this.options[i];\n    }\n  }\n};\n\n",
    "context": {
      "type": "method",
      "constructor": "Command",
      "cons": "Command",
      "name": "optionFor",
      "string": "Command.prototype.optionFor()"
    }
  },
  {
    "description": "Parse options from `argv` returning `argv`\nvoid of these options.",
    "param": "{Array} argv",
    "return": "{Array}",
    "api": "public",
    "params": [
      {
        "type": "Array",
        "name": "argv",
        "description": ""
      }
    ],
    "isPrivate": false,
    "ignore": false,
    "source": "Command.prototype.parseOptions = function(argv){\n  var args = []\n    , len = argv.length\n    , literal\n    , option\n    , arg;\n\n  var unknownOptions = [];\n\n  // parse options\n  for (var i = 0; i < len; ++i) {\n    arg = argv[i];\n\n    // literal args after --\n    if ('--' == arg) {\n      literal = true;\n      continue;\n    }\n\n    if (literal) {\n      args.push(arg);\n      continue;\n    }\n\n    // find matching Option\n    option = this.optionFor(arg);\n\n    // option is defined\n    if (option) {\n      // requires arg\n      if (option.required) {\n        arg = argv[++i];\n        if (null == arg) return this.optionMissingArgument(option);\n        this.emit(option.name(), arg);\n      // optional arg\n      } else if (option.optional) {\n        arg = argv[i+1];\n        if (null == arg || ('-' == arg[0] && '-' != arg)) {\n          arg = null;\n        } else {\n          ++i;\n        }\n        this.emit(option.name(), arg);\n      // bool\n      } else {\n        this.emit(option.name());\n      }\n      continue;\n    }\n\n    // looks like an option\n    if (arg.length > 1 && '-' == arg[0]) {\n      unknownOptions.push(arg);\n\n      // If the next argument looks like it might be\n      // an argument for this option, we pass it on.\n      // If it isn't, then it'll simply be ignored\n      if (argv[i+1] && '-' != argv[i+1][0]) {\n        unknownOptions.push(argv[++i]);\n      }\n      continue;\n    }\n\n    // arg\n    args.push(arg);\n  }\n\n  return { args: args, unknown: unknownOptions };\n};\n\n",
    "context": {
      "type": "method",
      "constructor": "Command",
      "cons": "Command",
      "name": "parseOptions",
      "string": "Command.prototype.parseOptions()"
    }
  },
  {
    "description": "Argument `name` is missing.",
    "param": "{String} name",
    "api": "private",
    "params": [
      {
        "type": "String",
        "name": "name",
        "description": ""
      }
    ],
    "isPrivate": true,
    "ignore": false,
    "source": "Command.prototype.missingArgument = function(name){\n  console.error();\n  console.error(\"  error: missing required argument `%s'\", name);\n  console.error();\n  process.exit(1);\n};\n\n",
    "context": {
      "type": "method",
      "constructor": "Command",
      "cons": "Command",
      "name": "missingArgument",
      "string": "Command.prototype.missingArgument()"
    }
  },
  {
    "description": "`Option` is missing an argument, but received `flag` or nothing.",
    "param": [
      "{String} option",
      "{String} flag"
    ],
    "api": "private",
    "params": [
      {
        "type": "String",
        "name": "option",
        "description": ""
      },
      {
        "type": "String",
        "name": "flag",
        "description": ""
      }
    ],
    "isPrivate": true,
    "ignore": false,
    "source": "Command.prototype.optionMissingArgument = function(option, flag){\n  console.error();\n  if (flag) {\n    console.error(\"  error: option `%s' argument missing, got `%s'\", option.flags, flag);\n  } else {\n    console.error(\"  error: option `%s' argument missing\", option.flags);\n  }\n  console.error();\n  process.exit(1);\n};\n\n",
    "context": {
      "type": "method",
      "constructor": "Command",
      "cons": "Command",
      "name": "optionMissingArgument",
      "string": "Command.prototype.optionMissingArgument()"
    }
  },
  {
    "description": "Unknown option `flag`.",
    "param": "{String} flag",
    "api": "private",
    "params": [
      {
        "type": "String",
        "name": "flag",
        "description": ""
      }
    ],
    "isPrivate": true,
    "ignore": false,
    "source": "Command.prototype.unknownOption = function(flag){\n  console.error();\n  console.error(\"  error: unknown option `%s'\", flag);\n  console.error();\n  process.exit(1);\n};\n\n\n",
    "context": {
      "type": "method",
      "constructor": "Command",
      "cons": "Command",
      "name": "unknownOption",
      "string": "Command.prototype.unknownOption()"
    }
  },
  {
    "description": "Set the program version to `str`.\n\nThis method auto-registers the \"-V, --version\" flag\nwhich will print the version number when passed.",
    "param": [
      "{String} str",
      "{String} flags"
    ],
    "return": "{Command} for chaining",
    "api": "public",
    "params": [
      {
        "type": "String",
        "name": "str",
        "description": ""
      },
      {
        "type": "String",
        "name": "flags",
        "description": ""
      }
    ],
    "isPrivate": false,
    "ignore": false,
    "source": "Command.prototype.version = function(str, flags){\n  if (0 == arguments.length) return this._version;\n  this._version = str;\n  flags = flags || '-V, --version';\n  this.option(flags, 'output the version number');\n  this.on('version', function(){\n    console.log(str);\n    process.exit(0);\n  });\n  return this;\n};\n\n",
    "context": {
      "type": "method",
      "constructor": "Command",
      "cons": "Command",
      "name": "version",
      "string": "Command.prototype.version()"
    }
  },
  {
    "description": "Set the description `str`.",
    "param": "{String} str",
    "return": "{String|Command}",
    "api": "public",
    "params": [
      {
        "type": "String",
        "name": "str",
        "description": ""
      }
    ],
    "isPrivate": false,
    "ignore": false,
    "source": "Command.prototype.description = function(str){\n  if (0 == arguments.length) return this._description;\n  this._description = str;\n  return this;\n};\n\n",
    "context": {
      "type": "method",
      "constructor": "Command",
      "cons": "Command",
      "name": "description",
      "string": "Command.prototype.description()"
    }
  },
  {
    "description": "Set / get the command usage `str`.",
    "param": "{String} str",
    "return": "{String|Command}",
    "api": "public",
    "params": [
      {
        "type": "String",
        "name": "str",
        "description": ""
      }
    ],
    "isPrivate": false,
    "ignore": false,
    "source": "Command.prototype.usage = function(str){\n  var args = this._args.map(function(arg){\n    return arg.required\n      ? '<' + arg.name + '>'\n      : '[' + arg.name + ']';\n  });\n\n  var usage = '[options'\n    + (this.commands.length ? '] [command' : '')\n    + ']'\n    + (this._args.length ? ' ' + args : '');\n\n  if (0 == arguments.length) return this._usage || usage;\n  this._usage = str;\n\n  return this;\n};\n\n",
    "context": {
      "type": "method",
      "constructor": "Command",
      "cons": "Command",
      "name": "usage",
      "string": "Command.prototype.usage()"
    }
  },
  {
    "description": "Return the largest option length.",
    "return": "{Number}",
    "api": "private",
    "isPrivate": true,
    "ignore": false,
    "source": "Command.prototype.largestOptionLength = function(){\n  return this.options.reduce(function(max, option){\n    return Math.max(max, option.flags.length);\n  }, 0);\n};\n\n",
    "context": {
      "type": "method",
      "constructor": "Command",
      "cons": "Command",
      "name": "largestOptionLength",
      "string": "Command.prototype.largestOptionLength()"
    }
  },
  {
    "description": "Return help for options.",
    "return": "{String}",
    "api": "private",
    "isPrivate": true,
    "ignore": false,
    "source": "Command.prototype.optionHelp = function(){\n  var width = this.largestOptionLength();\n\n  // Prepend the help information\n  return [pad('-h, --help', width) + '  ' + 'output usage information']\n    .concat(this.options.map(function(option){\n      return pad(option.flags, width)\n        + '  ' + option.description;\n      }))\n    .join('\\n');\n};\n\n",
    "context": {
      "type": "method",
      "constructor": "Command",
      "cons": "Command",
      "name": "optionHelp",
      "string": "Command.prototype.optionHelp()"
    }
  },
  {
    "description": "Return command help documentation.",
    "return": "{String}",
    "api": "private",
    "isPrivate": true,
    "ignore": false,
    "source": "Command.prototype.commandHelp = function(){\n  if (!this.commands.length) return '';\n  return [\n      ''\n    , '  Commands:'\n    , ''\n    , this.commands.map(function(cmd){\n      var args = cmd._args.map(function(arg){\n        return arg.required\n          ? '<' + arg.name + '>'\n          : '[' + arg.name + ']';\n      }).join(' ');\n\n      return pad(cmd._name\n        + (cmd.options.length\n          ? ' [options]'\n          : '') + ' ' + args, 22)\n        + (cmd.description()\n          ? ' ' + cmd.description()\n          : '');\n    }).join('\\n').replace(/^/gm, '    ')\n    , ''\n  ].join('\\n');\n};\n\n",
    "context": {
      "type": "method",
      "constructor": "Command",
      "cons": "Command",
      "name": "commandHelp",
      "string": "Command.prototype.commandHelp()"
    }
  },
  {
    "description": "Return program help documentation.",
    "return": "{String}",
    "api": "private",
    "isPrivate": true,
    "ignore": false,
    "source": "Command.prototype.helpInformation = function(){\n  return [\n      ''\n    , '  Usage: ' + this._name + ' ' + this.usage()\n    , '' + this.commandHelp()\n    , '  Options:'\n    , ''\n    , '' + this.optionHelp().replace(/^/gm, '    ')\n    , ''\n    , ''\n  ].join('\\n');\n};\n\n",
    "context": {
      "type": "method",
      "constructor": "Command",
      "cons": "Command",
      "name": "helpInformation",
      "string": "Command.prototype.helpInformation()"
    }
  },
  {
    "description": "Output help information for this command",
    "api": "public",
    "isPrivate": false,
    "ignore": false,
    "source": "Command.prototype.outputHelp = function(){\n  process.stdout.write(this.helpInformation());\n  this.emit('--help');\n};\n\n",
    "context": {
      "type": "method",
      "constructor": "Command",
      "cons": "Command",
      "name": "outputHelp",
      "string": "Command.prototype.outputHelp()"
    }
  },
  {
    "description": "Output help information and exit.",
    "api": "public",
    "isPrivate": false,
    "ignore": false,
    "source": "Command.prototype.help = function(){\n  this.outputHelp();\n  process.exit();\n};\n\n",
    "context": {
      "type": "method",
      "constructor": "Command",
      "cons": "Command",
      "name": "help",
      "string": "Command.prototype.help()"
    }
  },
  {
    "description": "Camel-case the given `flag`",
    "param": "{String} flag",
    "return": "{String}",
    "api": "private",
    "params": [
      {
        "type": "String",
        "name": "flag",
        "description": ""
      }
    ],
    "isPrivate": true,
    "ignore": false,
    "source": "function camelcase(flag) {\n  return flag.split('-').reduce(function(str, word){\n    return str + word[0].toUpperCase() + word.slice(1);\n  });\n}\n\n",
    "context": {
      "type": "function",
      "name": "camelcase",
      "string": "camelcase()"
    }
  },
  {
    "description": "Pad `str` to `width`.",
    "param": [
      "{String} str",
      "{Number} width"
    ],
    "return": "{String}",
    "api": "private",
    "params": [
      {
        "type": "String",
        "name": "str",
        "description": ""
      },
      {
        "type": "Number",
        "name": "width",
        "description": ""
      }
    ],
    "isPrivate": true,
    "ignore": false,
    "source": "function pad(str, width) {\n  var len = Math.max(0, width - str.length);\n  return str + Array(len + 1).join(' ');\n}\n\n",
    "context": {
      "type": "function",
      "name": "pad",
      "string": "pad()"
    }
  },
  {
    "description": "Output help information if necessary",
    "param": [
      "{Command} command to output help for",
      "{Array} array of options to search for -h or --help"
    ],
    "api": "private",
    "params": [
      {
        "type": "Command",
        "name": "command",
        "description": "to output help for"
      },
      {
        "type": "Array",
        "name": "array",
        "description": "of options to search for -h or --help"
      }
    ],
    "isPrivate": true,
    "ignore": false,
    "source": "function outputHelpIfNecessary(cmd, options) {\n  options = options || [];\n  for (var i = 0; i < options.length; i++) {\n    if (options[i] == '--help' || options[i] == '-h') {\n      cmd.outputHelp();\n      process.exit(0);\n    }\n  }\n}",
    "context": {
      "type": "function",
      "name": "outputHelpIfNecessary",
      "string": "outputHelpIfNecessary()"
    }
  }
]
