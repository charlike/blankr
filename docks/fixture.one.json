[
  {
    "description": "Module dependencies.",
    "isPrivate": true,
    "ignore": false,
    "source": "var debug = require('debug')('koa:application');\nvar Emitter = require('events').EventEmitter;\nvar compose = require('koa-compose');\nvar isJSON = require('koa-is-json');\nvar response = require('./response');\nvar context = require('./context');\nvar request = require('./request');\nvar finished = require('finished');\nvar Cookies = require('cookies');\nvar accepts = require('accepts');\nvar status = require('statuses');\nvar assert = require('assert');\nvar Stream = require('stream');\nvar http = require('http');\nvar only = require('only');\nvar co = require('co');\n\n",
    "context": {
      "type": "declaration",
      "name": "debug",
      "value": "require('debug')('koa:application')",
      "string": "debug"
    }
  },
  {
    "description": "Application prototype.",
    "isPrivate": true,
    "ignore": false,
    "source": "var app = Application.prototype;\n\n",
    "context": {
      "type": "declaration",
      "name": "app",
      "value": "Application.prototype",
      "string": "app"
    }
  },
  {
    "description": "Expose `Application`.",
    "isPrivate": true,
    "ignore": false,
    "source": "exports = module.exports = Application;\n\n"
  },
  {
    "description": "Initialize a new `Application`.",
    "api": "public",
    "isPrivate": false,
    "ignore": false,
    "source": "function Application() {\n  if (!(this instanceof Application)) return new Application;\n  this.env = process.env.NODE_ENV || 'development';\n  this.subdomainOffset = 2;\n  this.poweredBy = true;\n  this.middleware = [];\n  this.context = Object.create(context);\n  this.request = Object.create(request);\n  this.response = Object.create(response);\n}\n\n",
    "context": {
      "type": "function",
      "name": "Application",
      "string": "Application()"
    }
  },
  {
    "description": "Inherit from `Emitter.prototype`.",
    "isPrivate": true,
    "ignore": false,
    "source": "Application.prototype.__proto__ = Emitter.prototype;\n\n",
    "context": {
      "type": "property",
      "constructor": "Application",
      "cons": "Application",
      "name": "__proto__",
      "value": "Emitter.prototype",
      "string": "Application.prototype.__proto__"
    }
  },
  {
    "description": "Shorthand for:\n\n   http.createServer(app.callback()).listen(...)",
    "param": "{Mixed} ...",
    "return": "{Server}",
    "api": "public",
    "params": [
      {
        "type": "Mixed",
        "name": "...",
        "description": ""
      }
    ],
    "isPrivate": false,
    "ignore": false,
    "source": "app.listen = function(){\n  debug('listen');\n  var server = http.createServer(this.callback());\n  return server.listen.apply(server, arguments);\n};\n\n",
    "context": {
      "type": "method",
      "receiver": "app",
      "name": "listen",
      "string": "app.listen()"
    }
  },
  {
    "description": "Return JSON representation.",
    "return": "{Object}",
    "api": "public",
    "isPrivate": false,
    "ignore": false,
    "source": "app.toJSON = function(){\n  return only(this, [\n    'subdomainOffset',\n    'poweredBy',\n    'env'\n  ]);\n};\n\n",
    "context": {
      "type": "method",
      "receiver": "app",
      "name": "toJSON",
      "string": "app.toJSON()"
    }
  },
  {
    "description": "Use the given middleware `fn`.",
    "param": "{GeneratorFunction} fn",
    "return": "{Application} self",
    "api": "public",
    "params": [
      {
        "type": "GeneratorFunction",
        "name": "fn",
        "description": ""
      }
    ],
    "isPrivate": false,
    "ignore": false,
    "source": "app.use = function(fn){\n  assert('GeneratorFunction' == fn.constructor.name, 'app.use() requires a generator function');\n  debug('use %s', fn._name || fn.name || '-');\n  this.middleware.push(fn);\n  return this;\n};\n\n",
    "context": {
      "type": "method",
      "receiver": "app",
      "name": "use",
      "string": "app.use()"
    }
  },
  {
    "description": "Return a request handler callback\nfor node's native http server.",
    "return": "{Function}",
    "api": "public",
    "isPrivate": false,
    "ignore": false,
    "source": "app.callback = function(){\n  var mw = [respond].concat(this.middleware);\n  var gen = compose(mw);\n  var fn = co(gen);\n  var self = this;\n\n  if (!this.listeners('error').length) this.on('error', this.onerror);\n\n  return function(req, res){\n    res.statusCode = 404;\n    var ctx = self.createContext(req, res);\n    finished(ctx, ctx.onerror);\n    fn.call(ctx, ctx.onerror);\n  }\n};\n\n",
    "context": {
      "type": "method",
      "receiver": "app",
      "name": "callback",
      "string": "app.callback()"
    }
  },
  {
    "description": "Initialize a new context.",
    "api": "private",
    "isPrivate": true,
    "ignore": false,
    "source": "app.createContext = function(req, res){\n  var context = Object.create(this.context);\n  var request = context.request = Object.create(this.request);\n  var response = context.response = Object.create(this.response);\n  context.app = request.app = response.app = this;\n  context.req = request.req = response.req = req;\n  context.res = request.res = response.res = res;\n  request.ctx = response.ctx = context;\n  request.response = response;\n  response.request = request;\n  context.onerror = context.onerror.bind(context);\n  context.originalUrl = request.originalUrl = req.url;\n  context.cookies = new Cookies(req, res, this.keys);\n  context.accept = request.accept = accepts(req);\n  return context;\n};\n\n",
    "context": {
      "type": "method",
      "receiver": "app",
      "name": "createContext",
      "string": "app.createContext()"
    }
  },
  {
    "description": "Default error handler.",
    "param": "{Error} err",
    "api": "private",
    "params": [
      {
        "type": "Error",
        "name": "err",
        "description": ""
      }
    ],
    "isPrivate": true,
    "ignore": false,
    "source": "app.onerror = function(err){\n  assert(err instanceof Error, 'non-error thrown: ' + err);\n\n  if (404 == err.status) return;\n  if ('test' == this.env) return;\n\n  var msg = err.stack || err.toString();\n  console.error();\n  console.error(msg.replace(/^/gm, '  '));\n  console.error();\n};\n\n",
    "context": {
      "type": "method",
      "receiver": "app",
      "name": "onerror",
      "string": "app.onerror()"
    }
  },
  {
    "description": "Response middleware.",
    "isPrivate": true,
    "ignore": false,
    "source": "function *respond(next) {\n  if (this.app.poweredBy) this.set('X-Powered-By', 'koa');\n\n  yield *next;\n\n  // allow bypassing koa\n  if (false === this.respond) return;\n\n  var res = this.res;\n  if (res.headersSent || !this.writable) return;\n\n  var body = this.body;\n  var code = this.status;\n\n  // ignore body\n  if (status.empty[code]) {\n    // strip headers\n    this.body = null;\n    return res.end();\n  }\n\n  if ('HEAD' == this.method) {\n    if (isJSON(body)) this.length = Buffer.byteLength(JSON.stringify(body));\n    return res.end();\n  }\n\n  // status body\n  if (null == body) {\n    this.type = 'text';\n    body = status[code];\n    if (body) this.length = Buffer.byteLength(body);\n    return res.end(body);\n  }\n\n  // responses\n  if (Buffer.isBuffer(body)) return res.end(body);\n  if ('string' == typeof body) return res.end(body);\n  if (body instanceof Stream) return body.pipe(res);\n\n  // body: json\n  body = JSON.stringify(body);\n  this.length = Buffer.byteLength(body);\n  res.end(body);\n}"
  }
]
